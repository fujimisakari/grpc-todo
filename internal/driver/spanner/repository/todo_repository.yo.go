// Code generated by yo. DO NOT EDIT.
// Package repository contains the types.
package repository

import (
	"context"

	"cloud.google.com/go/spanner"
	"google.golang.org/api/iterator"
	"google.golang.org/grpc/codes"

	"github.com/fujimisakari/grpc-todo/internal/domain"
	domain_repo "github.com/fujimisakari/grpc-todo/internal/domain/repository"
)

const TodoTableName = "Todos"

// TodoRepository provides access to Todo rows.
type TodoRepository struct {
	client *spanner.Client
}

func (repo *TodoRepository) columns() []string {
	return []string{
		"Id",
		"Title",
		"Description",
		"Priority",
		"Completed",
		"DueTime",
		"CreatedAt",
		"UpdatedAt",
	}
}

func (repo *TodoRepository) ToDto(entity *domain.Todo) *TodoDto {
	dto := &TodoDto{}
	dto.ID = entity.ID
	dto.Title = entity.Title
	if entity.Description == "" {
		dto.Description = spanner.NullString{}
	} else {
		dto.Description = spanner.NullString{StringVal: entity.Description, Valid: true}
	}
	dto.Priority = int64(entity.Priority)
	dto.Completed = entity.Completed
	if entity.DueTime.IsZero() {
		dto.DueTime = spanner.NullTime{}
	} else {
		dto.DueTime = spanner.NullTime{Time: entity.DueTime, Valid: true}
	}
	dto.CreatedAt = entity.CreatedAt
	if entity.UpdatedAt.IsZero() {
		dto.UpdatedAt = spanner.NullTime{}
	} else {
		dto.UpdatedAt = spanner.NullTime{Time: entity.UpdatedAt, Valid: true}
	}
	return dto
}

// newTodo_Decoder returns a decoder which reads a row from *spanner.Row
// into Todo. The decoder is not goroutine-safe. Don't use it concurrently.
func (repo *TodoRepository) newDecoder(cols []string) func(*spanner.Row) (*TodoDto, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*TodoDto, error) {
		var t TodoDto
		ptrs, err := t.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &t, nil
	}
}

func (repo *TodoRepository) Insert(entity *domain.Todo) *spanner.Mutation {
	return repo.ToDto(entity).Insert()
}

func (repo *TodoRepository) Update(entity *domain.Todo) *spanner.Mutation {
	return repo.ToDto(entity).Update()
}

func (repo *TodoRepository) Delete(entity *domain.Todo) *spanner.Mutation {
	return repo.ToDto(entity).Delete()
}

// FindTodo gets a Todo by primary key
func (repo *TodoRepository) Find(ctx context.Context, db domain_repo.YORODB, id string) (*domain.Todo, error) {
	key := spanner.Key{id}
	row, err := db.ReadRow(ctx, "Todos", key, repo.columns())
	if err != nil {
		return nil, newError("FindTodo", "Todos", err)
	}

	decoder := repo.newDecoder(repo.columns())
	t, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "Find", "Todos", err)
	}

	return t.ToEntity(), nil
}

func (repo *TodoRepository) FindByStatement(ctx context.Context, db domain_repo.YORODB, stmt spanner.Statement) ([]*domain.Todo, error) {
	iter := db.Query(ctx, stmt)
	defer iter.Stop()

	decoder := repo.newDecoder(repo.columns())
	var ts []*domain.Todo
	for {
		row, err := iter.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return nil, err
		}

		t, err := decoder(row)
		if err != nil {
			return nil, newErrorWithCode(codes.Internal, "FindByStatement", "Todos", err)
		}

		ts = append(ts, t.ToEntity())
	}

	return ts, nil
}
