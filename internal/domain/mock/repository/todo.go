// Code generated by MockGen. DO NOT EDIT.
// Source: todo.go
//
// Generated by this command:
//
//	mockgen -source=todo.go -destination=../mock/repository/todo.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	spanner "cloud.google.com/go/spanner"
	domain "github.com/fujimisakari/grpc-todo/internal/domain"
	repository "github.com/fujimisakari/grpc-todo/internal/domain/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Todo mocks base method.
func (m *MockRepository) Todo() repository.Todo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Todo")
	ret0, _ := ret[0].(repository.Todo)
	return ret0
}

// Todo indicates an expected call of Todo.
func (mr *MockRepositoryMockRecorder) Todo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Todo", reflect.TypeOf((*MockRepository)(nil).Todo))
}

// MockTodo is a mock of Todo interface.
type MockTodo struct {
	ctrl     *gomock.Controller
	recorder *MockTodoMockRecorder
	isgomock struct{}
}

// MockTodoMockRecorder is the mock recorder for MockTodo.
type MockTodoMockRecorder struct {
	mock *MockTodo
}

// NewMockTodo creates a new mock instance.
func NewMockTodo(ctrl *gomock.Controller) *MockTodo {
	mock := &MockTodo{ctrl: ctrl}
	mock.recorder = &MockTodoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodo) EXPECT() *MockTodoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTodo) Delete(entity *domain.Todo) *spanner.Mutation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity)
	ret0, _ := ret[0].(*spanner.Mutation)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoMockRecorder) Delete(entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodo)(nil).Delete), entity)
}

// FindByID mocks base method.
func (m *MockTodo) FindByID(ctx context.Context, ro repository.YORODB, id string) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ro, id)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTodoMockRecorder) FindByID(ctx, ro, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTodo)(nil).FindByID), ctx, ro, id)
}

// Insert mocks base method.
func (m *MockTodo) Insert(entity *domain.Todo) *spanner.Mutation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", entity)
	ret0, _ := ret[0].(*spanner.Mutation)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTodoMockRecorder) Insert(entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTodo)(nil).Insert), entity)
}

// ListTodo mocks base method.
func (m *MockTodo) ListTodo(ctx context.Context, ro repository.YORODB) ([]*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodo", ctx, ro)
	ret0, _ := ret[0].([]*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodo indicates an expected call of ListTodo.
func (mr *MockTodoMockRecorder) ListTodo(ctx, ro any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodo", reflect.TypeOf((*MockTodo)(nil).ListTodo), ctx, ro)
}

// Update mocks base method.
func (m *MockTodo) Update(entity *domain.Todo) *spanner.Mutation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity)
	ret0, _ := ret[0].(*spanner.Mutation)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoMockRecorder) Update(entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodo)(nil).Update), entity)
}
