// Code generated by MockGen. DO NOT EDIT.
// Source: external_interface.go
//
// Generated by this command:
//
//	mockgen -source=external_interface.go -destination=../mock/grpc/external_interface.go -package=mock_grpc
//

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	domain "github.com/fujimisakari/grpc-todo/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockUsecase) CreateTodo(ctx context.Context, todo *domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockUsecaseMockRecorder) CreateTodo(ctx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockUsecase)(nil).CreateTodo), ctx, todo)
}

// DeleteTodo mocks base method.
func (m *MockUsecase) DeleteTodo(ctx context.Context, todoID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", ctx, todoID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockUsecaseMockRecorder) DeleteTodo(ctx, todoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockUsecase)(nil).DeleteTodo), ctx, todoID)
}

// GetTodo mocks base method.
func (m *MockUsecase) GetTodo(ctx context.Context, todoID string) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", ctx, todoID)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockUsecaseMockRecorder) GetTodo(ctx, todoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockUsecase)(nil).GetTodo), ctx, todoID)
}

// ListTodo mocks base method.
func (m *MockUsecase) ListTodo(ctx context.Context) ([]*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodo", ctx)
	ret0, _ := ret[0].([]*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodo indicates an expected call of ListTodo.
func (mr *MockUsecaseMockRecorder) ListTodo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodo", reflect.TypeOf((*MockUsecase)(nil).ListTodo), ctx)
}

// UpdateTodo mocks base method.
func (m *MockUsecase) UpdateTodo(ctx context.Context, todo *domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockUsecaseMockRecorder) UpdateTodo(ctx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockUsecase)(nil).UpdateTodo), ctx, todo)
}

// UpdateTodoStatus mocks base method.
func (m *MockUsecase) UpdateTodoStatus(ctx context.Context, todoID string, completed bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoStatus", ctx, todoID, completed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodoStatus indicates an expected call of UpdateTodoStatus.
func (mr *MockUsecaseMockRecorder) UpdateTodoStatus(ctx, todoID, completed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoStatus", reflect.TypeOf((*MockUsecase)(nil).UpdateTodoStatus), ctx, todoID, completed)
}
